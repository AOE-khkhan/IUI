from cStringIO import StringIO
from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
from pdfminer.converter import TextConverter
from pdfminer.layout import LAParams
from pdfminer.pdfpage import PDFPage
def convert(fname, pages=None):
    if not pages:
        pagenums = set()
    else:
        pagenums = set(pages)

    output = StringIO()
    manager = PDFResourceManager()
    converter = TextConverter(manager, output, laparams=LAParams())
    interpreter = PDFPageInterpreter(manager, converter)

    infile = file(fname, 'rb')
    for page in PDFPage.get_pages(infile, pagenums):
        interpreter.process_page(page)
    infile.close()
    converter.close()
    text = output.getvalue()
    output.close
    return text


l1 = [['Abacus'], ['Abstract', '', 'data', '', 'structures'], ['Abstract', '', 'data', '', 'structures'], ['Abstract', '', 'data', '', 'structures'], ['128'], ['quadrature)'], ['(randomint)'], ['(randomint)'], ['with', '', 'linked', '', 'lists)'], ['add', '', '(sparse', '', 'polynomials)'], ['Adjacency', '', 'lists'], ['Adjacency', '', 'lists'], ['383'], ['383'], ['383'], ['383'], ['383'], ['Adjacency', '', 'matrix'], ['Adjacency', '', 'matrix'], ['Adjacency', '', 'matrix'], ['410-411'], ['410-411'], ['410-411'], ['410-411'], ['lists)'], ['jacency', '', 'matrix)'], ['Algorithm', '', 'machines'], ['All-nearest-neighbors'], ['All-pairs', '', 'shortest', '', 'paths'], ['Analysis', '', 'of', '', 'algorithms'], ['Analysis', '', 'of', '', 'algorithms'], ['Analysis', '', 'of', '', 'algorithms'], ['Approximation', '', 'algorithms'], ['Approximation', '', 'algorithms'], ['524'], ['Arbitrary', '', 'numbers'], ['Arithmetic'], ['Arithmetic'], ['Arrays'], ['Articulation', '', 'points'], ['Articulation', '', 'points'], ['Articulation', '', 'points'], ['Artificial', '', '(slack)', '', 'variables'], ['Artificial', '', '(slack)', '', 'variables'], ['Attributes'], ['Average', '', 'case'], ['Average', '', 'case'], ['AVL', '', 'trees'], ['B-trees'], ['B-trees'], ['B-trees'], ['Backtracking'], ['Backtracking'], ['Backward', '', 'substitution'], ['Backward', '', 'substitution'], ['(substitute)'], ['Balanced', '', 'trees'], ['Balanced', '', 'trees'], ['Balanced', '', 'trees'], ['Balanced', '', 'trees'], ['Basis', '', 'variables'], ['Biconnectivity'], ['Biconnectivity'], ['Biconnectivity'], ['Binary', '', 'search'], ['Binary', '', 'search'], ['Binary', '', 'search'], ['(binarysearch)'], ['Binary', '', 'search', '', 'trees'], ['Binary', '', 'search', '', 'trees'], ['185'], ['185'], ['185'], ['185'], ['185'], ['185'], ['353'], ['array', '', 'representation'], ['indirect', '', 'representation'], ['indirect', '', 'representation'], ['185'], ['optimal'], ['optimal'], ['standard', '', 'representation'], ['standard', '', 'representation'], ['Binary', '', 'trees'], ['Binary', '', 'trees'], ['Binomial', '', 'queues'], ['Bipartite', '', 'graphs'], ['Bipartite', '', 'graphs'], ['Bitonic', '', '', 'merge'], ['Bitonic', '', '', 'merge'], ['bits'], ['bits'], ['bits'], ['bits'], ['bits'], ['bits'], ['bits'], ['avoidance', '', 'in', '', 'simplex)'], ['Bottom-up', '', 'parsing'], ['Bottom-up', '', 'parsing'], ['Branch-and-bound'], ['Branch-and-bound'], ['Breadth-first', '', 'search'], ['Breadth-first', '', 'search'], ['Breadth-first', '', 'search'], ['398'], ['searching)'], ['tion)'], ['tion)'], ['sertion)'], ['sertion)'], ['sertion)'], ['search)'], ['search)'], ['Caesar', '', 'cipher'], ['Catalan', '', 'numbers'], ['Ciphers'], ['Ciphers'], ['Caesar'], ['Vernam'], ['Vigenere'], ['product'], ['Ciphertext'], ['Closest-pair', '', 'problem'], ['Closest-pair', '', 'problem'], ['Closest-pair', '', 'problem'], ['Closest-point', '', 'problems'], ['Closest-point', '', 'problems'], ['Closest-point', '', 'problems'], ['Closure'], ['Closure'], ['Clustering'], ['Compare-exchange'], ['Compare-exchange'], ['Compare-exchange'], ['Compilers'], ['Compilers'], ['Compilers'], ['Compilers'], ['Compilers'], ['Complete', '', 'binary', '', 'tree'], ['Complete', '', 'graphs'], ['Complex', '', 'numbers'], ['Complex', '', 'numbers'], ['Complex', '', 'roots', '', 'of', '', 'unity'], ['Complex', '', 'roots', '', 'of', '', 'unity'], ['Computational', '', 'accuracy'], ['Computational', '', 'accuracy'], ['Computational', '', 'accuracy'], ['86'], ['Concatenation'], ['Concatenation'], ['Connected', '', 'components'], ['Connected', '', 'graph'], ['Connectivity'], ['Connectivity'], ['Connectivity'], ['Conquer-and-divide'], ['Constant', '', 'running', '', 'time'], ['Constraints'], ['Context-free', '', 'grammars'], ['Context-free', '', 'grammars'], ['Contextrsensitive', '', 'grammars'], ['Convex', '', 'hull'], ['Convex', '', 'hull', '', 'algorithms'], ['Convex', '', 'hull', '', 'algorithms'], ['Convex', '', 'hull', '', 'algorithms'], ['368'], ['divide-and-conquer'], ['Floyd-Eddy', '', 'method'], ['Floyd-Eddy', '', 'method'], ['Graham', '', 'scan'], ['Graham', '', 'scan'], ['Graham', '', 'scan'], ['(grahamscan)'], ['hull', '', 'selection'], ['hull', '', 'selection'], ['package', '', 'wrapping'], ['package', '', 'wrapping'], ['package', '', 'wrapping'], ['325', '', '(wrap)'], ['Convex', '', 'polygons'], ['Convexity'], ['Counting'], ['Cross', '', 'edges'], ['Cross', '', 'edges'], ['Cryptanalysis'], ['Cryptanalysis'], ['Cryptography'], ['Cryptography'], ['Cryptology'], ['Cryptology'], ['Cryptology'], ['Cryptosystem'], ['Cryptovariables'], ['Cubic', '', 'running', '', 'time'], ['Curve', '', 'fitting'], ['Curve', '', 'fitting'], ['Cycle'], ['Cycle'], ['506-507'], ['Data', '', 'fitting'], ['Data', '', 'fitting'], ['abstract'], ['abstract'], ['abstract'], ['adjacency', '', 'lists'], ['adjacency', '', 'lists'], ['adjacency', '', 'matrix'], ['adjacency', '', 'matrix'], ['adjacency', '', 'structure'], ['adjacency', '', 'structure'], ['array'], ['Btree'], ['Btree'], ['Btree'], ['binary', '', 'search', '', 'tree'], ['binary', '', 'search', '', 'tree'], ['deque'], ['deque'], ['heap'], ['heap'], ['indirect', '', 'heap'], ['indirect', '', 'heap'], ['linked', '', 'list'], ['linked', '', 'list'], ['linked', '', 'list'], ['linked', '', 'list'], ['linked', '', 'list'], ['priority', '', 'queue'], ['priority', '', 'queue'], ['queue'], ['queue'], ['sorted', '', 'list'], ['stack'], ['stack'], ['stack'], ['stack'], ['stack'], ['stack'], ['tree'], ['tree'], ['string'], ['top-down', '', '2-3-4', '', 'tree'], ['top-down', '', '2-3-4', '', 'tree'], ['unordered', '', 'list'], ['Database'], ['Database'], ['Database'], ['Decryption'], ['Decryption'], ['Deletion', '', 'in', '', 'hash', '', 'tables'], ['Dense', '', 'graphs'], ['Dense', '', 'graphs'], ['Dense', '', 'graphs'], ['Dense', '', 'graphs'], ['Dense', '', 'graphs'], ['411'], ['411'], ['411'], ['sal)'], ['sal)'], ['sal)'], ['Depth-first', '', 'search'], ['Depth-first', '', 'search'], ['Depth-first', '', 'search'], ['Depth-first', '', 'search'], ['391-395'], ['391-395'], ['391-395'], ['391-395'], ['391-395'], ['428-430'], ['428-430'], ['Depth-first', '', 'search', '', 'forest'], ['Depth-first', '', 'search', '', 'forest'], ['384'], ['384'], ['384'], ['Derivation'], ['Deterministic', '', 'algorithm'], ['Dictionaries'], ['Digital', '', 'search', '', 'trees'], ['Digital', '', 'search', '', 'trees'], ['digitalinsert'], ['digitalsearch'], ['the', '', 'shortest', '', 'path)'], ['Directed', '', 'cycle'], ['Directed', '', 'graphs'], ['Directed', '', 'graphs'], ['Directed', '', 'graphs'], ['Directed', '', 'graphs'], ['Directed', '', 'path'], ['Directory'], ['Discrete', '', 'mathematics'], ['Disk', '', 'searching'], ['Disk', '', 'searching'], ['Distribution', '', 'counting'], ['Distribution', '', 'counting'], ['Distribution', '', 'counting'], ['116'], ['116'], ['Divide-and-conquer'], ['Divide-and-conquer'], ['Divide-and-conquer'], ['Divide-and-conquer'], ['152'], ['152'], ['152'], ['152'], ['152'], ['152'], ['51'], ['51'], ['51'], ['51'], ['Dot', '', 'product'], ['Double', '', 'buffering'], ['Double', '', 'hashing'], ['Double', '', 'hashing'], ['Double', '', 'rotation'], ['Down', 'edges'], ['repair)'], ['Drawing', '', 'lines'], ['Drawing', '', 'lines'], ['Dual', '', 'of', '', 'Voronoi', '', 'diagram'], ['Dual', '', 'of', '', 'Voronoi', '', 'diagram'], ['Dynamic', '', 'programming'], ['Dynamic', '', 'programming'], ['Dynamic', '', 'programming'], ['Edges'], ['backward'], ['capacities'], ['cross'], ['cross'], ['down'], ['forward'], ['negative', '', 'weight'], ['up'], ['up'], ['Encryption'], ['Encryption'], ['eof'], ['Equal', '', 'keys'], ['Equal', '', 'keys'], ['Equal', '', 'keys'], ['Equal', '', 'keys'], ['Equal', '', 'keys'], ['214'], ['214'], ['214'], ['Escape', '', 'sequence'], ['the', '', 'gcd)'], ['the', '', 'gcd)'], ['the', '', 'gcd)'], ['the', '', 'gcd)'], ['tree'], ['problem'], ['problem'], ['eval', '', '', '(fast', '', 'Fourier', '', 'transform)'], ['eval', '', '', '(spline', '', 'evaluation)'], ['Exception', '', 'dictionary'], ['(visit)'], ['Exhaustive', '', 'search'], ['Exhaustive', '', 'search'], ['Exhaustive', '', 'search'], ['Exponential', '', 'running', '', 'time'], ['Exponential', '', 'running', '', 'time'], ['513'], ['513'], ['513'], ['Exponentiation'], ['Exponentiation'], ['Exponentiation'], ['Extendible', '', 'hashing'], ['Extendible', '', 'hashing'], ['Extendible', '', 'hashing'], ['External', '', 'nodes'], ['External', '', 'nodes'], ['External', '', 'nodes'], ['External', '', 'nodes'], ['External', '', 'searching'], ['External', '', 'searching'], ['External', '', 'sorting'], ['External', '', 'sorting'], ['factor', '', '(top-down', '', 'compiler)'], ['factor', '', '(top-down', '', 'parser)'], ['pression', '', 'and', '', 'balancing)'], ['pression', '', 'and', '', 'balancing)'], ['Fast', '', 'Fourier', '', 'transform'], ['Fast', '', 'Fourier', '', 'transform'], ['Fast', '', 'Fourier', '', 'transform'], ['480'], ['480'], ['Feasible', 'basis'], ['Feasible', 'basis'], ['File', '', 'compression'], ['File', '', 'compression'], ['Huffman', '', 'encoding'], ['Huffman', '', 'encoding'], ['run-length', '', 'encoding'], ['run-length', '', 'encoding'], ['variable-length', '', 'encoding'], ['variable-length', '', 'encoding'], ['Find'], ['403'], ['deterministic'], ['deterministic'], ['nondeterministic'], ['nondeterministic'], ['Flow'], ['Forecasting'], ['Forest'], ['Forward', '', 'elimination'], ['Forward', '', 'elimination'], ['Forward', '', 'elimination'], ['Forward', '', 'elimination'], ['62', '', '(eliminate)'], ['Cnode'], ['Fourier', '', 'transform'], ['Fourier', '', 'transform'], ['Fringe', '', 'vertices'], ['Fringe', '', 'vertices'], ['Gauss-Jordan', '', 'method'], ['Gauss-Jordan', '', 'method'], ['Gauss-Jordan', '', 'method'], ['Gaussian', '', 'elimination'], ['Gaussian', '', 'elimination'], ['Gaussian', '', 'elimination'], ['(gauss)'], ['(gauss)'], ['(gauss)'], ['(gauss)'], ['Euclid\xe2\x80\x99s', '', 'algorithm)'], ['Euclid\xe2\x80\x99s', '', 'algorithm)'], ['tern', '', 'matching'], ['tern', '', 'matching'], ['Geometric', '', 'algorithms'], ['Geometric', '', 'algorithms'], ['closest', '', 'pair'], ['closest', '', 'pair'], ['convex', '', 'hull'], ['convex', '', 'hull'], ['convex', '', 'hull'], ['elementary'], ['elementary'], ['grid', '', 'method'], ['grid', '', 'method'], ['inside', '', 'polygon', '', 'test'], ['inside', '', 'polygon', '', 'test'], ['intersection'], ['intersection'], ['line', '', 'drawing'], ['line', '', 'drawing'], ['range', '', 'searching'], ['range', '', 'searching'], ['simple', '', 'closed', '', 'path'], ['simple', '', 'closed', '', 'path'], ['2D-trees'], ['2D-trees'], ['Gerrymandering'], ['Graham', '', 'scan'], ['Graham', '', 'scan'], ['Graham', '', 'scan'], ['Graph', '', 'algorithms'], ['Graph', '', 'algorithms'], ['all-pairs', '', 'shortest', '', 'paths'], ['all-pairs', '', 'shortest', '', 'paths'], ['biconnectivity'], ['biconnectivity'], ['bipartite', '', 'matching'], ['bipartite', '', 'matching'], ['breadth-first', '', 'search'], ['connected', '', 'components'], ['cycle', '', 'testing'], ['depth-first', '', 'search'], ['depth-first', '', 'search'], ['elementary'], ['elementary'], ['minimum', '', 'spanning', '', 'tree'], ['minimum', '', 'spanning', '', 'tree'], ['traversal'], ['traversal'], ['shortest', '', 'path'], ['shortest', '', 'path'], ['stable', '', 'marriage'], ['stable', '', 'marriage'], ['ponents'], ['ponents'], ['topological', '', 'sorting'], ['topological', '', 'sorting'], ['transitive', '', 'closure'], ['transitive', '', 'closure'], ['union-find'], ['union-find'], ['Graph', '', 'isomorphism'], ['traversal'], ['traversal'], ['Graphs'], ['Graphs'], ['adjacency', '', 'list'], ['adjacency', '', 'matrix'], ['bipartite'], ['bipartite'], ['complete'], ['connected'], ['connectivity'], ['connectivity'], ['dense'], ['directed'], ['directed'], ['directed'], ['directed'], ['directed', '', 'acyclic'], ['directed', '', 'acyclic'], ['representation'], ['representation'], ['representation'], ['representation'], ['421'], ['sparse'], ['traversal'], ['traversal'], ['undirected'], ['weighted'], ['Greatest', '', 'increment', '', 'method'], ['Grid', '', 'method'], ['Grid', '', 'method'], ['Grid', '', 'method'], ['g7ngegrid)'], ['g7ngegrid)'], ['Hamilton', '', 'cycle', '', 'problem'], ['Hamilton', '', 'cycle', '', 'problem'], ['520'], ['520'], ['Hash', '', 'functions'], ['Hashing'], ['Hashing'], ['Hashing'], ['double', 'hashing'], ['double', 'hashing'], ['ing'], ['linear', '', 'probing'], ['linear', '', 'probing'], ['open', '', 'addressing'], ['open', '', 'addressing'], ['separate', '', 'chaining'], ['separate', '', 'chaining'], ['Head', '', 'node'], ['Head', '', 'node'], ['Head', '', 'node'], ['Head', '', 'node'], ['199'], ['199'], ['199'], ['199'], ['199'], ['199'], ['Heaps'], ['Heaps'], ['Heaps'], ['Heaps'], ['Heaps'], ['Heaps'], ['Heap', '', 'algorithms'], ['Heap', '', 'algorithms'], ['change'], ['construct'], ['construct'], ['downheap'], ['downheap'], ['insert'], ['insert'], ['join'], ['join'], ['pqconstruct'], ['pqdownheap'], ['pqdownheap'], ['pqdownheap'], ['pqinsert'], ['pqinsert'], ['pqinsert'], ['pqremove'], ['pqremove'], ['pqreplace'], ['pqreplace'], ['remove'], ['remove'], ['replace'], ['Heap', '', 'condition'], ['Heapsort'], ['Heapsort'], ['Heapsort'], ['Horner\xe2\x80\x99s', '', 'rule'], ['Horner\xe2\x80\x99s', '', 'rule'], ['compression)'], ['compression)'], ['compression)'], ['compression)'], ['Hybrid', '', 'searching'], ['Increment', '', 'sequence'], ['Indexed', '', 'sequential', '', 'access'], ['Indexed', '', 'sequential', '', 'access'], ['teger)'], ['teger)'], ['teger)'], ['teger)'], ['Indirect', '', 'binary', '', 'search', '', 'trees'], ['Indirect', '', 'binary', '', 'search', '', 'trees'], ['Indirect', '', 'heaps'], ['Indirect', '', 'heaps'], ['Indirect', '', 'heaps'], ['Indirect', '', 'heaps'], ['Indirect', '', 'heaps'], ['Infeasible', '', 'linear', '', 'program'], ['Inner', '', 'loop'], ['Inner', '', 'loop'], ['Inner', '', 'loop'], ['Inner', '', 'loop'], ['Insertion', '', 'sort'], ['Insertion', '', 'sort'], ['Insertion', '', 'sort'], ['(insertion)'], ['(insertion)'], ['(insertion)'], ['inside', '', '(point', '', 'inside', '', 'test)'], ['test)'], ['Integer', '', 'linear', '', 'programming'], ['Integration'], ['Integration'], ['adaptive', '', 'quadrature'], ['adaptive', '', 'quadrature'], ['adaptive', '', 'quadrature'], ['rectangle', '', 'method'], ['rectangle', '', 'method'], ['rectangle', '', 'method'], ['(intrect)'], ['Romberg'], ['Simpson\xe2\x80\x99s', '', 'method'], ['Simpson\xe2\x80\x99s', '', 'method'], ['Simpson\xe2\x80\x99s', '', 'method'], ['(intsimp)'], ['(intsimp)'], ['spline', '', 'quadrature'], ['symbolic'], ['symbolic'], ['trapezoid', '', 'method'], ['trapezoid', '', 'method'], ['trapezoid', '', 'method'], ['(i&trap)'], ['Internal', '', 'nodes'], ['Internal', '', 'nodes'], ['Internal', '', 'nodes'], ['Internal', '', 'nodes'], ['Interpolation', '', 'search'], ['Interpolation', '', 'search'], ['polynomial'], ['spline'], ['spline'], ['Intersection'], ['Intersection'], ['Intersection'], ['Manhattan', '', 'geometry'], ['Manhattan', '', 'geometry'], ['circles'], ['305'], ['305'], ['lines'], ['lines'], ['rectangles'], ['two', '', 'lines'], ['two', '', 'lines'], ['two', '', 'lines'], ['interval'], ['Inverse'], ['Inverse'], ['Inverse'], ['Inverse'], ['Key', '', 'generation'], ['binary', '', 'representation'], ['cryptology'], ['searching'], ['strings'], ['Knapsack', '', 'problem'], ['Knapsack', '', 'problem'], ['Knapsack', '', 'problem'], ['237'], ['237'], ['237'], ['ing'], ['ing'], ['spanning', '', 'tree)'], ['spanning', '', 'tree)'], ['spanning', '', 'tree)'], ['(kruskal)'], ['47'], ['Leading', '', 'term'], ['Leading', '', 'term'], ['Leaf', '', 'pages'], ['Least-squares', '', 'data', '', 'fitting'], ['Least-squares', '', 'data', '', 'fitting'], ['IgN'], ['Line'], ['Line', '', 'drawing'], ['Line', '', 'drawing'], ['Line', '', 'intersection'], ['Line', '', 'intersection'], ['Line', '', 'intersection'], ['one', 'pair'], ['one', 'pair'], ['initialization', '', '(buildytree)'], ['Manhattan', '', '(scan)'], ['35-38'], ['Linear', '', 'probing'], ['Linear', '', 'probing'], ['Linear', '', 'probing'], ['Linear', '', 'programming'], ['Linear', '', 'programming'], ['Linear', '', 'programming'], ['Linear', '', 'running', '', 'time'], ['Linked', '', 'lists'], ['Linked', '', 'lists'], ['create', '', 'and', '', 'add', '', 'node'], ['input', '', 'and', '', 'construction'], ['merging'], ['output'], ['sequential', '', 'search'], ['sequential', '', 'search'], ['sorting'], ['sorting'], ['sorting'], ['sorting'], ['InN'], ['Logarithm'], ['Logarithmic', '', 'running', '', 'time'], ['Longest', '', 'path'], ['Lookahead'], ['Master', '', 'index'], ['Matching'], ['Matching'], ['Matching'], ['sion', '', 'pattern', '', 'matching)'], ['Mathematical', '', 'algorithms'], ['Mathematical', '', 'algorithms'], ['Mathematical', '', 'programming'], ['addition'], ['addition'], ['band'], ['chain', '', 'product'], ['chain', '', 'product'], ['inverse'], ['multiplication'], ['multiplication'], ['multiplication'], ['multiplication'], ['multiplication', '', 'by', '', 'vector'], ['multiplication', '', 'by', '', 'vector'], ['representation'], ['representation'], ['sparse'], ['sparse'], ['thod'], ['thod'], ['thod'], ['thod'], ['transposition'], ['tridiagonal'], ['tridiagonal'], ['theorem'], ['Maximum', '', 'flow'], ['Maximum', '', 'flow'], ['Maximum', '', 'matching'], ['Mazes'], ['Mazes'], ['Mazes'], ['Mazes'], ['Merging'], ['Merging'], ['Merging'], ['Merging'], ['Merging'], ['Merging'], ['150-152'], ['150-152'], ['mergesort', '', '(recursive)'], ['mergesort', '', '(recursive)'], ['mergesort', '', '(recursive)'], ['148', '(sort)'], ['multiway'], ['multiway'], ['polyphase'], ['Microprocessors'], ['Microprocessors'], ['Minimum', '', 'cut'], ['Minimum', '', 'spanning', '', 'trees'], ['Minimum', '', 'spanning', '', 'trees'], ['413'], ['413'], ['413'], ['413'], ['413'], ['string', '', 'searching)'], ['mod'], ['mod'], ['mod'], ['mod'], ['mod'], ['mod'], ['ing'], ['ing'], ['large', '', 'integers'], ['matrices'], ['matrices'], ['matrices'], ['matrices'], ['quer)'], ['quer)'], ['transform)'], ['transform)'], ['Multiprocessor', '', 'scheduling'], ['Multiway', '', '', 'merging'], ['Multiway', '', '', 'merging'], ['Multiway', '', '', 'radix', '', 'searching'], ['Multiway', '', '', 'radix', '', 'searching'], ['N', '', 'log', '', 'A;', '', '', 'running', '', 'time'], ['name)'], ['name)'], ['name)'], ['Nearest-neighbor', '', 'problem'], ['Network', '', 'flow'], ['Network', '', 'flow'], ['Network', '', 'flow'], ['Network', '', 'flow'], ['Network', '', 'flow'], ['454'], ['454'], ['Networks'], ['Networks'], ['Node', '', 'transformations'], ['Node', '', 'transformations'], ['Non-basis', '', 'variables'], ['Nondeterminism'], ['Nondeterminism'], ['Nondeterminism'], ['Nonterminal', '', 'symbol'], ['NP'], ['NP-complete', '', 'problems'], ['NP-complete', '', 'problems'], ['NP-complete', '', 'problems'], ['Numerical', '', 'analysis'], ['Odd-even', '', 'merge'], ['Odd-even', '', 'merge'], ['(bstrange)'], ['One-way', '', 'branching'], ['Open', 'addressing'], ['Open', 'addressing'], ['Operations', '', 'research'], ['Operations', '', 'research'], ['Optimal', '', 'binary', '', 'search', '', 'trees'], ['Optimal', '', 'binary', '', 'search', '', 'trees'], ['Or'], ['Or'], ['Ordered', '', 'hashing'], ['P'], ['Package', '', 'wrapping'], ['Package', '', 'wrapping'], ['Pages'], ['Pages'], ['Parallel', '', 'computation'], ['Parallel', '', 'computation'], ['Parse', '', 'tree'], ['Parser', '', 'generator'], ['Parsing'], ['Parsing'], ['Parsing'], ['bottom-up'], ['bottom-up'], ['recursive', '', 'descent'], ['recursive', '', 'descent'], ['shift-reduce'], ['top-down'], ['top-down'], ['Partition'], ['Partitioning'], ['Partitioning'], ['112'], ['Pascal'], ['Pascal'], ['Pascal'], ['Pascal'], ['Path', '', 'compression'], ['Paths', '', 'in', '', 'graphs'], ['Paths', '', 'in', '', 'graphs'], ['Patricia'], ['Patricia'], ['Patricia'], ['patriciainsert'], ['patriciasearch'], ['Pattern', '', 'matching'], ['Pattern', '', 'matching'], ['Pattern', '', 'matching'], ['Pattern', '', 'matching'], ['Perfect', '', 'shuffle'], ['Perfect', '', 'shuffle'], ['Perfect', '', 'shuffle'], ['Perfect', '', 'shuffle'], ['469'], ['469'], ['469'], ['Permutation', '', 'generation'], ['Permutation', '', 'generation'], ['Objective', '', 'function'], ['Pivoting'], ['Pivoting'], ['Plaintext'], ['Planarity'], ['Point'], ['Polygon'], ['convex'], ['simple', 'closed'], ['simple', 'closed'], ['standard', '', 'representation'], ['test', '', 'if', '', 'point', '', 'inside'], ['test', '', 'if', '', 'point', '', 'inside'], ['Voronoi'], ['Polynomials'], ['Polynomials'], ['addition'], ['addition'], ['evaluation'], ['evaluation'], ['evaluation'], ['evaluation'], ['evaluation'], ['472'], ['472'], ['interpolation'], ['interpolation'], ['interpolation'], ['interpolation'], ['interpolation'], ['multiplication'], ['multiplication'], ['multiplication'], ['multiplication'], ['multiplication'], ['471-472'], ['471-472'], ['representation'], ['representation'], ['Polyphase', '', 'merging'], ['Pop'], ['Pop'], ['priority', '', 'queue)'], ['indirect)'], ['indirect)'], ['indirect)'], ['pqinsert'], ['from', '', 'priority', '', 'queue)'], ['from', '', 'priority', '', 'queue)'], ['139'], ['139'], ['Preprocessing'], ['spanning', '', 'tree)'], ['spanning', '', 'tree)'], ['spanning', '', 'tree)'], ['(treeprint)'], ['breadth-first', '', 'search'], ['breadth-first', '', 'search'], ['densepfs'], ['depth-first', '', 'search'], ['depth-first', '', 'search'], ['Euclidean', '', 'shortest', '', 'path'], ['minimum', '', 'spanning', '', 'tree'], ['minimum', '', 'spanning', '', 'tree'], ['411'], ['network', '', 'flow'], ['network', '', 'flow'], ['shortest', '', 'path'], ['shortest', '', 'path'], ['Priority', '', 'queues'], ['Priority', '', 'queues'], ['Priority', '', 'queues'], ['Priority', '', 'queues'], ['158-161'], ['158-161'], ['158-161'], ['Probe'], ['Projection'], ['Pruning'], ['Pruning'], ['Public-key', '', 'cryptosystems'], ['Public-key', '', 'cryptosystems'], ['302'], ['Push'], ['Pushdown', '', 'stack'], ['Pushdown', '', 'stack'], ['Pushdown', '', 'stack'], ['Queue'], ['Queue'], ['Quicksort'], ['Quicksort'], ['Quicksort'], ['Quicksort'], ['Quicksort'], ['135'], ['135'], ['135'], ['135'], ['135'], ['135'], ['sort)'], ['Radix', '', 'searching'], ['Radix', '', 'searching'], ['digital', '', 'search', '', 'trees'], ['digital', '', 'search', '', 'trees'], ['multiway'], ['multiway'], ['tries'], ['tries'], ['tries'], ['tries'], ['tries'], ['Radix', '', 'sorting'], ['Radix', '', 'sorting'], ['Radix', '', 'sorting'], ['Radix', '', 'sorting'], ['radix', '', 'exchange'], ['radix', '', 'exchange'], ['straight', '', 'radix'], ['straight', '', 'radix'], ['(randomint)'], ['(randomint)'], ['Random', '', 'number', '', 'generation'], ['Random', '', 'number', '', 'generation'], ['202'], ['Random', '', 'numbers'], ['Random', '', 'numbers'], ['Random', '', 'numbers'], ['38-40'], ['35-38'], ['pseudo-'], ['quasi-'], ['uniform'], ['grid', '', 'method'], ['grid', '', 'method'], ['grid', '', 'method'], ['/CD', '', '', 'trees'], ['/CD', '', '', 'trees'], ['multidimensional'], ['multidimensional'], ['one-dimensional'], ['one-dimensional'], ['projection'], ['sequential', '', 'search'], ['2D', '', 'trees'], ['2D', '', 'trees'], ['tion)'], ['construction)'], ['construction)'], ['readln'], ['searching'], ['searching'], ['sorting'], ['sorting'], ['Records/database'], ['Records/searching'], ['Recursion'], ['Recursion'], ['Recursion'], ['Recursion'], ['Recursion'], ['Recursion'], ['381-382'], ['381-382'], ['381-382'], ['381-382'], ['381-382'], ['491'], ['491'], ['491'], ['removal'], ['removal'], ['removal'], ['removal'], ['removal'], ['152'], ['152'], ['152'], ['152'], ['152'], ['152'], ['two-dimensional'], ['two-dimensional'], ['two-dimensional'], ['Red-black', '', 'trees'], ['Red-black', '', 'trees'], ['Reduction'], ['Reduction'], ['Reduction'], ['Regular', '', 'expression'], ['matching'], ['matching'], ['matching'], ['heap)'], ['Replacement', '', 'selection'], ['Replacement', '', 'selection'], ['in', '', 'heap)'], ['binary', '', 'search', '', 'trees'], ['binary', '', 'search', '', 'trees'], ['binary', '', 'search', '', 'trees'], ['finite', '', 'state', '', 'machines'], ['finite', '', 'state', '', 'machines'], ['finite', '', 'state', '', 'machines'], ['functions'], ['graphs'], ['graphs'], ['lines'], ['matrices'], ['matrices'], ['points'], ['polygons'], ['polygons'], ['polynomials'], ['polynomials'], ['trees', '', '(father', '', 'link)'], ['trees', '', '(father', '', 'link)'], ['trees', '', '(father', '', 'link)'], ['395-396'], ['395-396'], ['395-396'], ['395-396'], ['searching)'], ['Root', '', 'node'], ['Root', '', 'node'], ['Roots', '', 'of', '', 'unity'], ['Roots', '', 'of', '', 'unity'], ['Rotation'], ['Rotation'], ['Run-length', '', 'encoding'], ['Run-length', '', 'encoding'], ['same', '', 'side', '', 'of', '', 'a', '', 'line)'], ['Satisfiability'], ['Satisfiability'], ['Satisfiability'], ['Scan', '', 'conversion'], ['Scan', '', 'conversion'], ['tan)'], ['Scheduling'], ['Searching'], ['Searching'], ['binary', '', 'search'], ['binary', '', 'search'], ['binary', '', 'tree', '', 'search'], ['binary', '', 'tree', '', 'search'], ['digital', '', 'search', '', 'trees'], ['digital', '', 'search', '', 'trees'], ['disk', '', 'searching'], ['disk', '', 'searching'], ['elementary', '', 'methods'], ['elementary', '', 'methods'], ['extendible', '', 'hashing'], ['extendible', '', 'hashing'], ['external', '', 'searching'], ['external', '', 'searching'], ['hashing'], ['hashing'], ['radix', '', 'search', '', 'tries'], ['radix', '', 'search', '', 'tries'], ['radix', '', 'searching'], ['radix', '', 'searching'], ['sequential'], ['sequential', '', 'list'], ['varying', '', 'length', '', 'keys'], ['Selection'], ['Selection'], ['Selection', '', 'sort'], ['Selection', '', 'sort'], ['Selection', '', 'sort'], ['Self-organizing', '', 'search'], ['Seminumerical', '', 'algorithms'], ['Sentinel'], ['Sentinel'], ['Sentinel'], ['Sentinel'], ['Sentinel'], ['Sentinel'], ['96'], ['96'], ['96'], ['Separate', '', 'chaining'], ['Separate', '', 'chaining'], ['Separate', '', 'chaining'], ['Sequential', '', 'searching'], ['Sequential', '', 'searching'], ['Sequential', '', 'searching'], ['Sets'], ['Sets'], ['Shortest', '', 'path'], ['Shortest', '', 'path'], ['Shortest', '', 'path'], ['Shortest', '', 'path'], ['Shortest', '', 'path'], ['Simple', '', 'closed', '', 'path'], ['Simple', '', 'closed', '', 'path'], ['Simplex', '', 'method'], ['Simplex', '', 'method'], ['Simultaneous', '', 'equations'], ['Simultaneous', '', 'equations'], ['Simultaneous', '', 'equations'], ['Single', '', 'rotation'], ['Single', '', 'rotation'], ['Sink'], ['Slack', '', '(artificial)', '', 'variables'], ['Sort-merge'], ['sort3', '', '(sorting', '', 'three', '', 'elements)'], ['sort3', '', '(sorting', '', 'three', '', 'elements)'], ['Sorting'], ['Sorting'], ['bubble'], ['disk'], ['disk'], ['disk'], ['disk'], ['distribution', '', 'counting'], ['distribution', '', 'counting'], ['elementary', '', 'methods'], ['elementary', '', 'methods'], ['external'], ['Heapsort'], ['Heapsort'], ['insertion'], ['insertion'], ['internal'], ['linear'], ['linear'], ['mergesort', '', '(recursive)'], ['mergesort', '', '(recursive)'], ['Quicksort'], ['Quicksort'], ['radix', '', 'exchange'], ['radix', '', 'exchange'], ['selection'], ['selection'], ['shellsort'], ['shellsort'], ['stability'], ['stability'], ['stability'], ['stability'], ['straight', '', 'radix'], ['straight', '', 'radix'], ['tape'], ['tape'], ['three', '', 'elements', '', '(sort3)'], ['Source'], ['Spanning', '', 'trees'], ['Spanning', '', 'trees'], ['Spanning', '', 'trees'], ['Sparse', '', 'graphs'], ['Sparse', '', 'graphs'], ['Sparse', '', 'graphs'], ['Sparse', '', 'graphs'], ['397-398'], ['397-398'], ['sal)'], ['sal)'], ['sal)'], ['sal)'], ['sal)'], ['sal)'], ['Spline', '', 'interpolation'], ['Spline', '', 'interpolation'], ['(makespline)'], ['Spline', '', 'quadrature'], ['Splitting'], ['Splitting'], ['Splitting'], ['Splitting'], ['Splitting'], ['Stable', '', 'marriage', '', 'problem'], ['Stable', '', 'marriage', '', 'problem'], ['452'], ['Stack'], ['Stack'], ['Stack'], ['grams'], ['Steepest', '', 'descent', '', 'method'], ['sort)'], ['sort)'], ['Strassen\xe2\x80\x99s', '', 'method'], ['Strassen\xe2\x80\x99s', '', 'method'], ['Strassen\xe2\x80\x99s', '', 'method'], ['Strassen\xe2\x80\x99s', '', 'method'], ['Strassen\xe2\x80\x99s', '', 'method'], ['String', '', 'processing'], ['String', '', 'processing'], ['String', '', 'searching'], ['String', '', 'searching'], ['Boyer-Moore'], ['brute-force'], ['mismatched', '', 'character'], ['mismatched', '', 'character'], ['multiple', '', 'searches'], ['Strings'], ['Strings'], ['Strings'], ['Strings'], ['tion)'], ['Supercomputer'], ['Supercomputer'], ['Supercomputer'], ['Symbol', '', 'tables'], ['Systolic', '', 'arrays'], ['Systolic', '', 'arrays'], ['Tail', '', 'node'], ['Tail', '', 'node'], ['Tail', '', 'node'], ['Tail', '', 'node'], ['Tail', '', 'node'], ['Tail', '', 'node'], ['Terminal', '', 'symbol'], ['term', '', '(top-down', '', 'compiler)'], ['term', '', '(top-down', '', 'parser)'], ['316'], ['316'], ['3-node'], ['Top-down', '', '2-3-4', '', 'trees'], ['Top-down', '', '2-3-4', '', 'trees'], ['Top-down', '', 'parsing'], ['Top-down', '', 'parsing'], ['Topological', '', 'sorting'], ['Topological', '', 'sorting'], ['Topological', '', 'sorting'], ['Transitive', '', 'closure'], ['Transitive', '', 'closure'], ['Transitive', '', 'closure'], ['Traveling', '', 'salesman', '', 'problem'], ['Traveling', '', 'salesman', '', 'problem'], ['513-524'], ['513-524'], ['Tree', '', 'vertices'], ['initialization)'], ['sertion)'], ['sorted', '', 'output)'], ['sorted', '', 'output)'], ['sorted', '', 'output)'], ['AVL'], ['balanced'], ['balanced'], ['binary'], ['binary'], ['binary', '', 'search'], ['breadth-first', '', 'search'], ['depth-first', '', 'search'], ['depth-first', '', 'search'], ['depth-first', '', 'search'], ['394'], ['394'], ['exhaustive', '', 'search'], ['exhaustive', '', 'search'], ['290-292'], ['290-292'], ['290-292'], ['290-292'], ['411'], ['parse'], ['red-black'], ['red-black'], ['spanning'], ['spanning'], ['spanning'], ['top-down', '', '2-3-4'], ['top-down', '', '2-3-4'], ['2-3'], ['2-3-4'], ['union-find'], ['union-find'], ['180'], ['Tries'], ['Tries'], ['Tries'], ['Tries'], ['2D', '', '(two-dimensional)', '', 'trees'], ['Variable-length', '', 'encoding'], ['Variable-length', '', 'encoding'], ['Vernam', '', 'cipher'], ['Vertex', '', 'cover'], ['(visit)'], ['(visit)'], ['Vertices'], ['fringe'], ['tree'], ['unseen'], ['trees)'], ['2D', '', 'trees)'], ['2-node'], ['2-3', '', 'trees'], ['2-3-4', '', 'tree'], ['Undirected', '', 'graphs'], ['Union'], ['Union-find'], ['Union-find', '', 'algorithms'], ['Union-find', '', 'algorithms'], ['analysis'], ['(fastfind)'], ['(find)'], ['halving'], ['height', '', 'balancing'], ['path', '', 'compression'], ['quick', '', 'union'], ['splitting'], ['weight', '', 'balancing'], ['Unseen', '', 'vertices'], ['Unseen', '', 'vertices'], ['Up', '', 'edges'], ['Up', '', 'edges'], ['bottom)'], ['cuits'], ['Vigenere', '', 'cipher'], ['Virtual', '', 'memory'], ['Virtual', '', 'memory'], ['Visited', '', 'vertices'], ['tivity'], ['components'], ['permutation', '', 'generation'], ['tion'], ['Voronoi', '', 'diagram'], ['Voronoi', '', 'diagram'], ['Voronoi', '', 'dual'], ['transitive', '', 'closure)'], ['transitive', '', 'closure)'], ['transitive', '', 'closure)'], ['Weight', '', 'balancing'], ['Weighted', '', 'graphs'], ['Weighted', '', 'graphs'], ['Weighted', '', 'graphs'], ['Weighted', '', 'graphs'], ['Weighted', '', 'matching'], ['Worst', 'case'], ['wrapping)'], ['writelist', '', '', '(linked', '', 'list', '', 'output)'], ['writelist', '', '', '(linked', '', 'list', '', 'output)'], ['writeln'], ['z'], ['z'], ['z'], ['z'], ['z'], ['z'], ['z'], ['z'], ['203'], ['203'], ['203'], ['203'], ['203'], ['203'], ['345'], ['345'], ['345'], ['345']]

l2 = ['  528.', '  30', '  88', '', '  136.', '  85.', '  38', '40.', '  27.', '  28.', '  3788381', '  3822', '  391', '392', '  410', '411', '  435.', '  3777378', '  384', '', '  425', '  435', '  493', '  515.', '  379.', '  378.', '  4577469.', '  366.', '  4922494.', '  12', '16', '  19.', '  522', '', '  533.', '  33.', '  23', '30.', '  24.', '  390', '392', '', '  503', '', '  335.', '  12', '13.', '  198.', '  228', '231', '  237.', '  517', '522.', '  60', '  62', '  64.', '  187', '199', '  237', '', '  504.', '  390', '392', '  429.', '  175', '177', '  176', '   336.', '  169', '  178%', '  204', '  210', '  336', '  343', '346', '', '  3566359.', '  1844185.', '  184', '', '  353.', '  489', '492.', '  178', '', '  179', '  237.', '  167.', '  444', '447.', '  463', '465.', '  116', '  118', '  122', '  214', '  215', '  221', '', '  509.', '  275', '276.', '  519', '520.', '  395', '  397', '', '  439.', '  243.', '  185', '  355.', '  184', '  353', '  355.', '  337', '  355.', '  297.', '  487.', '  297', '300.', '  297.', '  299.', '  298.', '  300.', '  297.', '  362', '366', '', '  361', '368', '', '  258', '  261.', '  207.', '  93', '  460', '465.', '  247', '  269', '  276', '279', '', '  130.', '  376.', '  473', '478.', '  473', '477.', '  61', '  63', '', '  504.', '  258', '  261.', '  375.', '  375.', '  389', '405', '  454.', '  152.', '  14.', '  498.', '  270', '272.', '  272.', '  321.', '  321', '333', '', '  370.', '  368.', '  331', '332.', '  326', '330', '  329', '  332.', '  331', '332.', '  323', '326', '', '  332.', '  321.', '  321.', '  455.', '  423', '  430.', '  295', '296.', '  295', '296.', '  295', '302', '   304.', '  296.', '  299.', '  15.', '  67', '76.', '  375', '  384.', '  509.', '  67', '76.', '  30', '  128', '  136.', '  378', '381.', '  377', '378.', '  378', '381', '  24.', '   228', '231', '  237.', '  178', '185.', '  263', '267.', '  129', '140.', '  138', '139.', '  27', '28', '   202', '203', '', '  127', '140.', '  264', '  395.', '  129.', '  109', '110', '   264', '  394', '  428', '', '  192', '199.', '  241.', '  187', '199.', '  129.', '  226', '  237', '  335.', '  297', '  301.', '  208.', '  376', '  378', '  397', '398', '', '  413', '  415', '417.', '  416', '  439', '440.', '  371', '  381', '387', '', '  397', '399', '  422', '423', '', '  454', '  515.', '  382', '', '  394', '  422', '423.', '  270.', '  528.', '  171.', '  213', '216.', '  215.', '  214.', '  415.', '  428.', '  376', '  380', '  421', '', '  423.', '  233.', '  19.', '  225', '235.', '  99', '101', '', '  122', '123.', '  48', '  51', '  104', '', '  175', '  362', '  474', '  477', '480', '', '  108', '  149', '  475', '  363.', '  74.', '  161.', '  207', '210.', '  198.', ' 423.', '  134.', '  310  (draw)', '  311.', '  367', '', '  483', '494', '', '  374.', '  437.', '  435.', '  423', '  430.', '  423.', '  437.', '  494.', '  423', '  430.', '  297', '  301.', '   9.', '  172', '  177', '  193', '  204', '', '  227', '228', '  234.', '  286.', '  10', '11', '  19', '  302.', '  417.', '  522', '524.', '  479.', '  72.', '  210.', '  515.', '  513', '524', '   536.', '  15', '', '  520', '  528', '  534.', '  46', '47', '  301.', '  231', '235', '', '  180', '  230', '  289', '', '  225', '235.', '  155', '165.', '  278.', '  274.', '  403', '', '  465', '  471', '', '  479  (eval)', '  536.', '  509', '510.', '  283', '293.', '  286', '293.', '  284', '286.', '  286', '', '  399.', '  411.', '  248', '  259.', '  259', '267.', '  435.', '  161.', '  375.', '  59', '  60', '62', '', '  64.', '   188.', '  471', '480.', '  393', '  410.', '  63', '  65', '', '  57', '65', '  60', '  71', '  76', '  504', '  508.', '  11', '  12.', '  265  (match)', '', '  307', '370.', '  362', '366.', '  321', '333', '  368.', '  307', '319.', '  339', '342.', '  316', '318.', '  349', '359.', '  310', '311.', '  336', '347.', '  313', '315.', '  343', '346.', '  307.', '  326', '330', '   329', '  373', '454.', '  492', '', '  390', '392.', '  444', '447.', '  395.', '  384.', '  384.', '  381', '387.', '  373', '387.', '  408', '', '  395', '397.', '  413', '415.', '  447', '452.', '  428', '430.', '  426', '428.', '  423', '426.', '  398', '405.', '  387.', '  393', '398.', '  492', '494.', '  416.', '  416.', '  444', '447.', '  376.', '  375.', '  389', '405.', '  376.', '  376', '  421', '430', '  421&', '  426', '428.', '  376', '381', '  416', '', '  435.', '  376.', '  393', '398.', '  376.', '  376.', '  507.', '  339', '342', '  341', '   342  (gridrange)', '', '  514', '', '  531', '532.', '  202.', '  201', '210', '  234.', '  207', '210.', '  205  (ha&initialize).', '  2055207', '  205', '  205', '210.', '  202', '204.', '  1744175', '  180', '  181', '', '  203', '204', '  214', '  222', '  352', '', '  89', '  129', '140', '  289', '290', '', '  129', '140.', '  135.', '  136', '137.', '  134', '  136.', '  132', '  135.', '  139', '140.', '  138.', '  139', '  289', '290.', '  139', '  158', '  160.', '  139', '  290.', '  159', '  160.', '  134', '  135.', '  135.', '  130.', '  135', '137', '  136', '  45', '46.', '  239', '  286', '293', '', '  219.', '  98.', '  226', '', '  227', '  230', '  231', '  376.', '  184', '', '  138', '139', '  159', '160', '', '  501.', '  13', '14', '  106', '  124.', '  95', '96', '  96', '  112', '  123', '124.', '  318.', '  338.', '  533.', '  79', '86.', '  85', '86', '  85', '  80', '82', '  81', '  85.', '  84.', '  83', '84', '  84', '  85', '86.', '  85.', '  79', '80.', '  82', '83', '  83', '   85.', '  180', '  230', '  289', '', '  177', '178.', '  68.', '  68', '72.', '  349', '359', '   370.', '  350', '356.', '  359.', '  350', '356.', '  356', '359.', '  359.', '  312', '313', '  313', '  337.', '  138', '  385', '  450', '451.', '  299.', '  119.', '  297.', '  171.', '  254.', '  483', '486', '  519.', '  242', '  304', '  454.', '  244', '249.', '  411', '413', '  412', '   417.', '  472.', '  14', '  15.', '  233.', '  73', '76.', '   16.', '  308.', '  310', '311.', '  312', '313', '  349%', '  312', '313.', '   353.', '  355.', '  37  (random).', '  205', '207', '  209.', '  497', '510', '', '  14.', '  25', '28.', '  27', '  26', '  148  (listmerge).', '  26  (writelist).', '  174  (listin', '', '  149', '152', '  149  (sort)', '', '   16.', '  16.', '  14.', '  527.', '  273.', '  227.', '  443', '452', '  454.', '  265.', '  23', '88.', '  497.', '  28', '29  (matradd).', '  64.', '  486', '489.', '  65.', '  29', '  53', '54', '  487.', '  466', '', '  28', '30.', '  30', '  63.', '  53', '54', '  65', '  487.', '  465.', '  64', '  71.', '  438.', '  435', '438.', '  443.', '  385', '386', '  398', '  418.', '  146', '152', '  156', '164', '  363', '', '  151  (mergesort)', '', '  148', '149', '', ' 363.', '  156', '162.', '  163.', '  458', '  469.', '  438.', '  408', '', '  417', '  454', '  518', '  522', '524.', '  251.', '  10', '12', '   34', '40', '  301', '302.', '  346', '347.', '  37  (mult).', '  27', '28', '  51', '52.', '  48', '50   (mult).', '  471', '480.', '  533.', '  156', '162.', '  218', '', '  15.', '  376', '  428', '  429.', '  366.', '  433', '441', '  445', '447', '', '  497', '499.', '  376', '  435.', '  189', '191.', '  504.', '  259', '267', '  529.', '  270.', '  529.', '  527', '534', '', '  88.', '  459', '463.', '  337.', '  218.', '  205', '210.', '  433', '  441.', '  489', '', '  258', '  261.', '  210.', '  528.', '  323', '326.', '  226', '239.', '  457', '469.', '  271.', '  280.', '  269', '280', '  304.', '  275', '276.', '  272', '275.', '  276.', '  272', '275.', '  533.', '  104', '105 ', '  145.', '  9', '  19', '  271', '272.', '  403.', '  374', '423.', '  219', '223', '  254.', '  222.', '  221.', '  241', '  257', '267', '', '  459', '465', '   468', '', '  478', '480', '   536.', '  520', '', '  498.', '  5044510', '  508  (pivot).', '  296.', '  387.', '  308.', '  308.', '  321.', '  313', '315.', '  318.', '  316', '318.', '  367.', '  45', '54.', '  24', '28.', '  45', '46', '  465', '  471', '', '  474', '475.', '  47', '48', '  471', '472', '', '  24', '25', '  48', '50', '', '   477', '480.', '  23', '28.', '  163.', '  109', '  439.', '  396.', '  138', '  396', '  411.', '  139.', '  396', '', '  290', '  411.', '  335.', '  410', '411', '  413.', ' 336.', '  397', '  416.', '  416.', '  397', '  416.', '  418.', '  409', '', '  416.', '  439', '440.', '  413', '416.', '  127', '140', '   144', '', '  167', '  395', '397.', '  205.', '  339.', '  517', '522.', '  300', '', '  304.', '  109.', '  109', '110', '  394.', '  109', '  395.', '  103', '113', '  118', '  124', '', '  144', '  152', '  165', '  167', '  183', '', '  118.', '  213', '223.', '  213', '216.', '  218', '219.', '  216', '218', '  291', '293', '', '  115', '124', '  165', '  218.', '  117', '121.', '  121', '124.', '  38', '  40.', '  88', '', '  299.', '  33', '42', '  112.', '   42.', '  42.', ' 33.', '  34.', '  34.', '  339', '342', '  346.', '  346', '347.', '  346', '347.', '  336', '337.', '  339.', '  338.', '  343', '346.', '  194.', '  26', '  148.', '  9.', '  171', '172.', '  93', '94.', '  335.', '  171.', '  11', '12', '  176', '  363', '366', '', '   398', '  465', '  479', '  489', '', '  515', '  517', '522.', '  110', '111', '  145', '146', '', '  176', '  179', '180', '  275', '  366', '', '  356', '  361', '', '  192', '199.', '  445', '  530', '532.', '  258.', '  258', '  279', '  304.', '  134.', '  158', '161.', '  135.', '  178', '179', '', '  247', '  262', '', '  65.', '  376', '381.', '  308.', '  28', '30.', '  308.', '  306', '  318.', '  23', '  28.', '  290', '202', '', '  400', '404', '  411', '  415.', '  253.', '  230', '  233.', '  473', '477.', '  196', '197.', '  284', '286.', '  313.', '  529', '  531', '532.', '  310', '311.', '  355.', '  373.', '  171', '237.', '  175', '177.', '  178', '185.', '  213', '216.', '  225', '235.', '  171', '185.', '  231', '235.', '  225', '235.', '  201', '210.', '  216', '218.', '  213', '223.', '  172.', '  174.', '  223.', '  144', '146.', '  95  (selection)', '  144', '', '  175.', '  88.', '  106', '  173', '  273', '  309', '  329', '', ' 247', ' 254', ' 493.', '  202', '204', '  209.', '  172', '174', '', '  398', '405.', '  413', '415', '  418', '  454', '', '  313', '315.', '  497', '510.', '  58', '  75', '', '  196', '197.', '  435.', '  503.', '  156.', '  93', '', '  91', '167.', '  99.', '  162', '  165', '  155', '165.', '  99', '101.', '  91', '101.', '  92.', '  135', '137.', '  95', '96.', '  92.', '  123', '124.', '  148', '149.', '  103', '114.', '  117', '121.', '  94', '95.', '  97', '99.', '  92', '93', '  121', '  152.', '  121', '124.', '  155', '165.', '  93.', '  435.', '  375', '  408', '413.', '  376', '  378', '  396', '', '  411', '  413.', '  396', '  410', '  415', '417', '  439', '', '  68872', '  71', '  72  (eval).', '  85.', '  189', '191', '  1944199', '  228', '', '  447', '', '  454.', '  394', '  428', '  429.', '  503.', '  507.', '  121', '124.', '  53', '54', '  65', '  88', '', '  241', '304.', '  241', '254.', '  2499252.', '  243.', '  250', '', '  254.', '  241', '  283', '  284', '285.', '  62.', '  458', '  513', '  528.', '  171.', '  466', '  536.', '  25', '28', '  174', '175', '  180', '', '  270.', '  278.', '  273.', '  324', '  325.', '  188.', '  187', '199.', '  272', '275', '  426', '428', '', '  423', '426', '  493.', '  387', '', '   531', '532.', '  393.', '  181.', '  181.', '  182', '  346', '  354.', '  198.', '  187', '199.', '  179', '  237.', '  1788185.', '  395.', '  382', '  384', '', '  422', '423.', '  516', '519.', '  395', '396', '  4OOC404', '', '  415.', '  271.', '  192', '199.', '  375', '  408', '413.', '  187', '199.', '  198.', '  188.', '  399', '404.', '  193.', '  216', '218', '  291', '293.', '  343%', '  286', '', '  299.', '  533.', '  382.', '  384.', '  374.', '  393.', '  393.', '  393.', '  345.', '  346.', '  188.', '  198.', '  188.', '  376.', '  399.', '  454.', '  398', '405.', '  405.', '  403.', '  401.', '  404.', '  404.', '  403.', '  401.', '  404.', '  402.', '  393', '  410.', '  423', '  430.', '  132.', '  458.', '  298.', '  165', '  234.', '  410.', '  392.', '  429.', '  521.', '  457.', '  366', '368.', '  417.', '  425', '  492', '', '  402.', '  376', '  380', '  407', '', '  444.', ' 13.', '  325.', '  26', '', '  9.', ' 25', '28', ' 174', '175', ' 180', '181', ' 194', '', ' 214', '215', ' 221', '222', ' 341', '', ' 352', '353', ' 364', '365.']

print len(l1)
print len(l2)
for faf in range(len(l2)):
    tex = l1[faf]
    tex2 = l2[faf]
    if any(c.isalpha() for c in tex2) or len(tex2)>4 or tex2=='':
        continue
    print tex
    if str(tex2[-1:])=='.':
        tex2 = tex2[:-1]
    m = convert('Algo5.pdf', pages=[int(tex2)+7])

    m = m.split('\n\n')
    f2 = open("xxAlgo5.txt",'a')
    f3 = open("yyAlgo5.txt",'a')
    for k in m:
        if len(k)>150:
            s = ""
            k = list(k)
            chick = []
            mac = 0
            while mac<len(k):
            #print k[mac]
                if k[mac]=='\n':
                #k[m] = " "
                    chick.append(' ')

                elif k[mac]=='-':
                    temp = mac+1
                #print "True"
                    if temp!=len(k) and k[temp]=='\n':
                    #print "True"
                        mac = mac+1
                    else:
                        chick.append(k[mac].lower())
                else:
                    chick.append(k[mac].lower())
                mac = mac+1
            k = chick

            
        
            print "".join(k).strip()
            temp = "".join(k)

            temp.strip()
            f2.write(temp)
            f2.write("\n")

            temp = temp.split(' ')
            l = []
            for cha in temp:
                #if "isymmetric" in cha: #or "pproxmia" in cha:
                #    l.append(1)
                check = 0
                for vv in tex:
                    if vv.lower() in cha and vv!='':
                        print cha
                        l.append(1)
                        check=1
                        break
                if check==0:
                    l.append(0)
            print len(temp)
            print len(l)
            lll = ",".join(str(x) for x in l)
            f3.write(lll)
            f3.write("\n")
            print "\n"
            print l
            print "\n"
    f2.close()
    f3.close()
